
import torch
import numpy as np
from torch.utils.data import Dataset
from torch.utils.data import DataLoader
from sklearn.model_selection import train_test_split
 
 

raw_data = np.loadtxt('housePrice.csv', delimiter=',', dtype=np.float32)
X = raw_data[:, 1:12]
y = raw_data[:, [0]]
Xtrain, Xtest, Ytrain, Ytest = train_test_split(X,y,test_size=0.3)
Xtest = torch.from_numpy(Xtest)
Ytest = torch.from_numpy(Ytest)

# prepare dataset
 
class DiabetesDataset(Dataset):
    def __init__(self, data,label):
 
        self.len = data.shape[0] # shape(Row, column)
        self.x_data = torch.from_numpy(data)
        self.y_data = torch.from_numpy(label)
 
    def __getitem__(self, index):
        return self.x_data[index], self.y_data[index]
 
    def __len__(self):
        return self.len
 
#mini-batch
train_dataset = DiabetesDataset(Xtrain,Ytrain)
train_loader = DataLoader(dataset=train_dataset, batch_size=32, shuffle=True, num_workers=1) 
 
# design model using class
def r2_loss(output, target):
    target_mean = torch.mean(target)
    ss_tot = torch.sum((target - target_mean) ** 2)
    ss_res = torch.sum((target - output) ** 2)
    r2 = 1 - ss_res / ss_tot
    return r2

def test():
    with torch.no_grad():
        y_pred = model(Xtest)
        #y_pred_label = torch.where(y_pred>=0.5,torch.tensor([1.0]),torch.tensor([0.0]))
        acc = r2_loss(y_pred, Ytest)
        print("test acc:", acc)
        return acc
 
class Model(torch.nn.Module):
    def __init__(self):
        super(Model, self).__init__()
        self.linear1 = torch.nn.Linear(11, 64)
        self.linear2 = torch.nn.Linear(64, 32)
        #self.linear3 = torch.nn.Linear(32, 16)
        self.linear4 = torch.nn.Linear(32, 1)
        self.relu = torch.nn.ReLU()
 
    def forward(self, x):
        x = self.relu(self.linear1(x))
        x = self.relu(self.linear2(x))
        #x = self.relu(self.linear3(x))
        x = self.linear4(x)
        return x

 
 
model = Model()
epoch_list = []
loss_list = []
# construct loss and optimizer
criterion = torch.nn.MSELoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.005)
 
 
# training cycle forward, backward, update
 
def train(epoch):
    trainloss = 0.0
    count = 0
    acc = 0
    for i, data in enumerate(train_loader, 0):
        inputs, labels = data
        y_pred = model(inputs)
        print(y_pred[1])
        print(labels[1])
        test()
 
        loss = criterion(y_pred, labels)
        #print(y_pred)
 
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
        trainloss += loss.item()
        count = i

       
    if epoch%20 == 19:
        print("train loss:", trainloss/count,end=',\n')
    acc = test()
    epoch_list.append(epoch)
    loss_list.append(acc)
    plt.plot(epoch_list, loss_list)
    plt.ylabel('acc')
    plt.xlabel('epoch')
    plt.show()  
 
if __name__ == '__main__':
    for epoch in range(50):
        train(epoch)
  


  
